{"version":3,"sources":["ColorRow.js","App.js","serviceWorker.js","index.js"],"names":["ColorRow","color","isDark","useState","copied","setCopied","colorTextRef","useRef","style","padding","display","width","textAlign","t","className","ref","colorBlockStyle","c","onClick","colorValue","navigator","clipboard","writeText","setTimeout","list","marginLeft","backgroundColor","borderRadius","checkIfHex","someColor","length","includes","App","inputRef","renderLightens","map","num","renderColor","Color","mix","hex","rgb","renderDarkens","darken","useEffect","current","focus","baseColor","setBaseColor","renderBaseColor","setRenderBaseColor","lightens","setLightens","darkens","setDarkens","error","setError","inputStyle","fontSize","border","marginTop","handleCalculate","console","log","fontWeight","fontStyle","marginBottom","onChange","e","target","value","onKeyDown","key","placeholder","cursor","type","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.bae452f4.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react'\nimport { colorBlockStyle } from './App';\n\nconst ColorRow = (color, isDark) => {\n  const [copied, setCopied] = useState(false)\n\n  const colorTextRef = useRef(null)\n\n  const copyValue = (colorValue) => {\n    navigator.clipboard.writeText(colorValue)\n    setCopied(true)\n    setTimeout(() => {\n      setCopied(false)\n    }, 3000)\n  }\n\n  return (\n      <div style={{padding: '5px'}}>\n          <span style={{display: 'inline-block', width: '100px', textAlign: 'right'}}>{color.t}</span>\n          <span className=\"color-block\" ref={colorTextRef} style={colorBlockStyle(color.c, isDark)} onClick={() => copyValue(color.c)}>{color.c}</span>\n          <div className={`copy ${copied && 'success'}`}>Copied!</div>\n      </div>\n  )\n}\n\nexport default ColorRow\n","import React, {useState, useRef, useEffect} from 'react';\nimport ColorRow from './ColorRow'\nimport './App.css';\nimport Color from \"color\";\n\nconst list = [1,2,3,4,5,6,7,8,9]\n\nexport const colorBlockStyle = (color, isDark) => ({\n  display: 'inline-block',\n  padding: '10px',\n  marginLeft: '10px',\n  backgroundColor: `${color}`,\n  borderRadius: '6px',\n  width: '100px',\n  color: isDark ? 'white' : 'black'\n})\n\nconst checkIfHex = (someColor) => {\n  if (someColor.length <= 7 && !someColor.includes('#')) {\n    return '#' + someColor\n  }\n  return someColor\n}\n\n\nfunction App() {\n  const initialColor = '#C63527'\n  const inputRef = useRef(null)\n\n  const renderLightens = (color) => list.map(num => {\n    const renderColor = checkIfHex(color)\n\n    if (renderColor.includes('#')) return {t: `lighten ${10-num}0% `, c: Color('#fff').mix(Color(`${renderColor}`), num/10).hex()}\n    if (renderColor.includes('rgb')) return {t: `lighten ${10-num}0% `, c: Color('#fff').mix(Color(`${renderColor}`), num/10).rgb()}\n    return {t: `lighten ${10-num}0% `, c: Color('#fff').mix(Color(`${renderColor}`), num/10).hex()}\n  })\n\n  const renderDarkens = (color) => list.map(num => {\n    const renderColor = checkIfHex(color)\n\n    return renderColor.includes('#') \n      ? {t: `darken ${num}0% `, c: Color(`${renderColor}`).darken(num/10).hex()}\n      : {t: `darken ${num}0% `, c: Color(`${renderColor}`).darken(num/10)}\n  })\n\n  useEffect(() => {\n    inputRef.current.focus()\n  }, [])\n\n  const [baseColor, setBaseColor] = useState(initialColor)\n  const [renderBaseColor, setRenderBaseColor] = useState({t: 'BASE', c: `${initialColor}`})\n  const [lightens, setLightens] = useState(renderLightens(initialColor))\n  const [darkens, setDarkens] = useState(renderDarkens(initialColor))\n  const [error, setError] = useState(false)\n\n\n  const inputStyle = {\n    padding: '12px',\n    fontSize: '16px',\n    border: '5px solid grey',\n    borderRadius: '8px',\n    marginTop: '10px'\n  }\n\n\n  const handleChange = (e) => {\n    setBaseColor(e.target.value)\n  }\n\n  const handleKeyDown = (e) => {\n    if (e.key === 'Enter') {\n      handleCalculate()\n    }\n  }\n\n  const handleCalculate = () => {\n    let color = baseColor\n    console.log(baseColor)\n    // if a hex code (rgb can't be less than 7)\n    if (baseColor.length <= 7) {\n      if (!baseColor.includes('#')) {\n        color = '#' + baseColor\n      }\n    }\n    if (color.includes('#')) {\n      setError(false)\n      setRenderBaseColor({t: 'BASE', c: `${color}`})\n      setLightens(renderLightens(color))\n      setDarkens(renderDarkens(color))\n    } else {\n      setError('This can only handle hex codes at the moment, but will support all colors soon!')\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <div style={{width: '400px', display: 'inline-block', marginTop: '40px', fontWeight: 'bold', fontStyle: 'italic', fontSize: '40px'}}>\n        <div>Shaderade</div>\n      </div>\n      <div style={{marginBottom: '16px'}}>\n        <input ref={inputRef} className=\"input\" style={inputStyle} onChange={handleChange} onKeyDown={handleKeyDown} value={baseColor} placeholder=\"Hex Code\" />\n        <button style={{...inputStyle, border: '1px solid grey', marginLeft: '12px', cursor: 'pointer', backgroundColor: '#e0e0e0'}} type=\"submit\" onClick={handleCalculate}>Shade It!</button>\n        {error ? <div style={{color: 'red', fontWeight: 'bold'}}>{error}</div> : null}\n      </div>\n      <div style={{marginBottom: '20px'}}>Click any color to copy its value to the clipboard</div>\n\n\n      {lightens.map(color => ColorRow(color))}\n\n      <div style={{textAlign: 'center'}}>\n        <div style={{display: 'inline-block', width: '400px', border: '3px solid black', borderRadius: '5px', backgroundColor: '#f0f0f0'}}>\n          {ColorRow(renderBaseColor)}\n        </div>\n      </div>\n\n      {darkens.map(color => (ColorRow(color, true)))}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}