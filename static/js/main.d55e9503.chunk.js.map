{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["list","App","renderLightens","color","map","num","t","c","Color","mix","hex","renderDarkens","darken","useState","baseColor","setBaseColor","renderBaseColor","setRenderBaseColor","lightens","setLightens","darkens","setDarkens","colorBlockStyle","isDark","display","padding","marginLeft","backgroundColor","borderRadius","width","row","style","textAlign","console","log","className","fontSize","border","marginTop","onChange","e","target","value","length","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uOAIMA,EAAO,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GA0EfC,MAxEf,WACE,IACMC,EAAiB,SAACC,GAAD,OAAWH,EAAKI,KAAI,SAAAC,GACzC,MAAO,CAACC,EAAE,WAAD,OAAaD,EAAb,OAAuBE,EAAGC,IAAM,QAAQC,IAAID,IAAM,IAAD,OAAKL,IAAUE,EAAI,IAAIK,WAE7EC,EAAgB,SAACR,GAAD,OAAWH,EAAKI,KAAI,SAAAC,GACxC,MAAO,CAACC,EAAE,UAAD,OAAYD,EAAZ,OAAsBE,EAAGC,IAAM,IAAD,OAAKL,IAASS,OAAOP,EAAI,IAAIK,WANzD,EASqBG,mBARb,UADR,mBASNC,EATM,KASKC,EATL,OAUiCF,mBAAS,CAACP,EAAG,eAAgBC,EAAE,IAAD,OATvD,YADR,mBAUNS,EAVM,KAUWC,EAVX,OAWmBJ,mBAASX,EAVpB,WADR,mBAWNgB,EAXM,KAWIC,EAXJ,OAYiBN,mBAASF,EAXlB,WADR,mBAYNS,EAZM,KAYGC,EAZH,KAcPC,EAAkB,SAACnB,EAAOoB,GAAR,MAAoB,CAC1CC,QAAS,eACTC,QAAS,OACTC,WAAY,OACZC,gBAAgB,GAAD,OAAKxB,GACpByB,aAAc,MACdC,MAAO,QACP1B,MAAOoB,EAAS,QAAU,UA0BtBO,EAAM,SAAC3B,EAAOoB,GAAR,OACV,yBAAKQ,MAAO,CAACN,QAAS,QACpB,0BAAMM,MAAO,CAACF,MAAO,QAASG,UAAW,UAAW7B,EAAMG,GAC1D,0BAAMyB,MAAOT,EAAgBnB,EAAMI,EAAGgB,IAAUpB,EAAMI,KAK1D,OADA0B,QAAQC,IAAI,WAAYhB,GAEtB,yBAAKiB,UAAU,OACb,yBAAKJ,MAAO,CAACF,MAAO,UAClB,qEACA,qDAEF,2BAAOE,MArCQ,CACjBN,QAAS,OACTW,SAAU,OACVC,OAAQ,iBACRT,aAAc,MACdU,UAAW,QAgCiBC,SA5BT,SAACC,GACpBP,QAAQC,IAAI,QAASM,EAAEC,OAAOC,OAC9B3B,EAAayB,EAAEC,OAAOC,OACtBT,QAAQC,IAAI,YAAapB,GACzBG,EAAmB,CAACX,EAAG,eAAgBC,EAAE,IAAD,OAAMO,KAChB,IAA1B0B,EAAEC,OAAOC,MAAMC,QACjBxB,EAAYjB,EAAeY,IAC3BO,EAAWV,EAAcG,MAEzBK,EAAY,IACZE,EAAW,MAkBuCqB,MAAO5B,EAAW8B,YAAY,aAE/E1B,EAASd,KAAI,SAAAD,GAAK,OAAI2B,EAAI3B,MAE1B2B,EAAId,GAEJI,EAAQhB,KAAI,SAAAD,GAAK,OAAK2B,EAAI3B,GAAO,QC7DpB0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,a","file":"static/js/main.d55e9503.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\nimport Color from \"color\";\n\nconst list = [1,2,3,4,5,6,7,8,9]\n\nfunction App() {\n  const initialColor = 'C63527'\n  const renderLightens = (color) => list.map(num => {\n    return {t: `lighten ${num}0% `, c: Color('#fff').mix(Color(`#${color}`), num/10).hex()}\n  })\n  const renderDarkens = (color) => list.map(num => {\n    return {t: `darken ${num}0% `, c: Color(`#${color}`).darken(num/10).hex()}\n  })\n\n  const [baseColor, setBaseColor] = useState(initialColor)\n  const [renderBaseColor, setRenderBaseColor] = useState({t: '----BASE----', c: `#${initialColor}`})\n  const [lightens, setLightens] = useState(renderLightens(initialColor))\n  const [darkens, setDarkens] = useState(renderDarkens(initialColor))\n\n  const colorBlockStyle = (color, isDark) => ({\n    display: 'inline-block',\n    padding: '10px',\n    marginLeft: '10px',\n    backgroundColor: `${color}`,\n    borderRadius: '6px',\n    width: '100px',\n    color: isDark ? 'white' : 'black'\n  })\n\n  const inputStyle = {\n    padding: '12px',\n    fontSize: '16px',\n    border: '1px solid grey',\n    borderRadius: '5px',\n    marginTop: '40px'\n  }\n\n\n  const handleChange = (e) => {\n    console.log('input', e.target.value)\n    setBaseColor(e.target.value)\n    console.log('basecolor', baseColor)\n    setRenderBaseColor({t: '----BASE----', c: `#${baseColor}`})\n    if (e.target.value.length === 6) {\n      setLightens(renderLightens(baseColor))\n      setDarkens(renderDarkens(baseColor))\n    } else {\n      setLightens([])\n      setDarkens([])\n    }\n  }\n\n  const row = (color, isDark) => (\n    <div style={{padding: '5px'}}>\n      <span style={{width: '200px', textAlign: 'right'}}>{color.t}</span>\n      <span style={colorBlockStyle(color.c, isDark)}>{color.c}</span>\n    </div>\n  )\n\n  console.log('lightens', lightens)\n  return (\n    <div className=\"App\">\n      <div style={{width: '400px'}}>\n        <div>Don't add a hash before the hex code</div>\n        <div>Hex must be 6 chars</div>\n      </div>\n      <input style={inputStyle} onChange={handleChange} value={baseColor} placeholder=\"Hex Code\" />\n\n      {lightens.map(color => row(color))}\n\n      {row(renderBaseColor)}\n\n      {darkens.map(color => (row(color, true)))}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}